# Generated by Django 4.2.17 on 2025-07-02 20:03

from django.db import migrations, models


def convert_string_to_integer_receipt_types(apps, schema_editor):
    """
    Convert existing string receipt types to integer values
    """
    Receipt = apps.get_model('receipt_mgmt', 'Receipt')
    
    # Mapping from old string values to new integer values
    string_to_int_mapping = {
        'Groceries': 1,
        'Apparel': 2,
        'Meals': 3,
        'Electronics': 4,
        'Supplies': 5,
        'Healthcare': 6,
        'Home': 7,
        'Other': 8,
    }
    
    # Convert each receipt
    for receipt in Receipt.objects.all():
        old_value = receipt.receipt_type
        new_value = string_to_int_mapping.get(old_value, 8)  # Default to 'Other' (8)
        
        # Update the receipt with the integer value
        Receipt.objects.filter(pk=receipt.pk).update(receipt_type=new_value)
        
        # Optional: Print progress for large datasets
        if Receipt.objects.count() > 100:
            print(f"Converted receipt {receipt.pk}: '{old_value}' -> {new_value}")


def reverse_integer_to_string_receipt_types(apps, schema_editor):
    """
    Reverse migration: Convert integer receipt types back to string values
    """
    Receipt = apps.get_model('receipt_mgmt', 'Receipt')
    
    # Mapping from integer values back to string values
    int_to_string_mapping = {
        1: 'Groceries',
        2: 'Apparel',
        3: 'Meals',
        4: 'Electronics',
        5: 'Supplies',
        6: 'Healthcare',
        7: 'Home',
        8: 'Other',
    }
    
    # Convert each receipt back
    for receipt in Receipt.objects.all():
        old_value = receipt.receipt_type
        new_value = int_to_string_mapping.get(old_value, 'Other')  # Default to 'Other'
        
        # Update the receipt with the string value
        Receipt.objects.filter(pk=receipt.pk).update(receipt_type=new_value)


class Migration(migrations.Migration):

    dependencies = [
        ('receipt_mgmt', '0003_alter_item_options_alter_receipt_options_and_more'),
    ]

    operations = [
        # Step 1: Add a temporary integer field
        migrations.AddField(
            model_name='receipt',
            name='receipt_type_temp',
            field=models.IntegerField(
                choices=[
                    (1, 'Groceries'),
                    (2, 'Apparel'),
                    (3, 'Meals'),
                    (4, 'Electronics'),
                    (5, 'Supplies'),
                    (6, 'Healthcare'),
                    (7, 'Home'),
                    (8, 'Other')
                ],
                default=8,
                help_text='Category of the receipt',
                null=True
            ),
        ),
        
        # Step 2: Convert data from string to integer
        migrations.RunPython(
            convert_string_to_integer_receipt_types,
            reverse_integer_to_string_receipt_types
        ),
        
        # Step 3: Remove the old text field
        migrations.RemoveField(
            model_name='receipt',
            name='receipt_type',
        ),
        
        # Step 4: Rename the temp field to the original name
        migrations.RenameField(
            model_name='receipt',
            old_name='receipt_type_temp',
            new_name='receipt_type',
        ),
        
        # Step 5: Update the field to remove null=True and set proper default
        migrations.AlterField(
            model_name='receipt',
            name='receipt_type',
            field=models.IntegerField(
                choices=[
                    (1, 'Groceries'),
                    (2, 'Apparel'),
                    (3, 'Meals'),
                    (4, 'Electronics'),
                    (5, 'Supplies'),
                    (6, 'Healthcare'),
                    (7, 'Home'),
                    (8, 'Other')
                ],
                default=8,
                help_text='Category of the receipt'
            ),
        ),
    ]
